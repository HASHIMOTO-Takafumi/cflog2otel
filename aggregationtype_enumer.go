// Code generated by "enumer -type=AggregationType -trimprefix=AggregationType -json -text"; DO NOT EDIT.

package cflog2otel

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AggregationTypeName = "CountSumHistogram"

var _AggregationTypeIndex = [...]uint8{0, 5, 8, 17}

const _AggregationTypeLowerName = "countsumhistogram"

func (i AggregationType) String() string {
	if i < 0 || i >= AggregationType(len(_AggregationTypeIndex)-1) {
		return fmt.Sprintf("AggregationType(%d)", i)
	}
	return _AggregationTypeName[_AggregationTypeIndex[i]:_AggregationTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AggregationTypeNoOp() {
	var x [1]struct{}
	_ = x[AggregationTypeCount-(0)]
	_ = x[AggregationTypeSum-(1)]
	_ = x[AggregationTypeHistogram-(2)]
}

var _AggregationTypeValues = []AggregationType{AggregationTypeCount, AggregationTypeSum, AggregationTypeHistogram}

var _AggregationTypeNameToValueMap = map[string]AggregationType{
	_AggregationTypeName[0:5]:       AggregationTypeCount,
	_AggregationTypeLowerName[0:5]:  AggregationTypeCount,
	_AggregationTypeName[5:8]:       AggregationTypeSum,
	_AggregationTypeLowerName[5:8]:  AggregationTypeSum,
	_AggregationTypeName[8:17]:      AggregationTypeHistogram,
	_AggregationTypeLowerName[8:17]: AggregationTypeHistogram,
}

var _AggregationTypeNames = []string{
	_AggregationTypeName[0:5],
	_AggregationTypeName[5:8],
	_AggregationTypeName[8:17],
}

// AggregationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AggregationTypeString(s string) (AggregationType, error) {
	if val, ok := _AggregationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AggregationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AggregationType values", s)
}

// AggregationTypeValues returns all values of the enum
func AggregationTypeValues() []AggregationType {
	return _AggregationTypeValues
}

// AggregationTypeStrings returns a slice of all String values of the enum
func AggregationTypeStrings() []string {
	strs := make([]string, len(_AggregationTypeNames))
	copy(strs, _AggregationTypeNames)
	return strs
}

// IsAAggregationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AggregationType) IsAAggregationType() bool {
	for _, v := range _AggregationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AggregationType
func (i AggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregationType
func (i *AggregationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AggregationType should be a string, got %s", data)
	}

	var err error
	*i, err = AggregationTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AggregationType
func (i AggregationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AggregationType
func (i *AggregationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AggregationTypeString(string(text))
	return err
}
